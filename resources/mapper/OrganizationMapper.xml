<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.admin.dao.OrganizationMapper">
  <cache type="org.mybatis.caches.ehcache.LoggingEhcache" />
  <resultMap id="BaseResultMap" type="com.admin.model.Organization">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="parent_id" jdbcType="BIGINT" property="parentId" />
    <result column="parent_ids" jdbcType="VARCHAR" property="parentIds" />
    <result column="available" jdbcType="BIT" property="available" />
  </resultMap>
  <sql id="Base_Column_List">
    id, name, parent_id, parent_ids, available
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_organization
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insertSelective" parameterType="com.admin.model.Organization">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into sys_organization
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="parentId != null">
        parent_id,
      </if>
      <if test="parentIds != null">
        parent_ids,
      </if>
      <if test="available != null">
        available,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=BIGINT},
      </if>
      <if test="parentIds != null">
        #{parentIds,jdbcType=VARCHAR},
      </if>
      <if test="available != null">
        #{available,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.admin.model.Organization">
    update sys_organization
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        parent_id = #{parentId,jdbcType=BIGINT},
      </if>
      <if test="parentIds != null">
        parent_ids = #{parentIds,jdbcType=VARCHAR},
      </if>
      <if test="available != null">
        available = #{available,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_organization
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <select id="selectByCondition" parameterType="com.admin.model.Organization" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_organization where 1 = 1 
    <if test="name != null">
        and name = #{name,jdbcType=VARCHAR}
    </if>
    <if test="parentId != null">
        and parent_id = #{parentId,jdbcType=BIGINT}
    </if>
    <if test="parentIds != null">
        and parent_ids = #{parentIds,jdbcType=VARCHAR}
    </if>
    <if test="available != null">
        and available = #{available,jdbcType=BIT}
    </if>
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_organization
  </select>
  <delete id="deleteBySelective" parameterType="com.admin.model.Organization">
    delete from sys_organization
    <where>
      <if test="name != null">
          and name = #{name,jdbcType=VARCHAR}
      </if>
      <if test="parentId != null">
          and parent_id = #{parentId,jdbcType=BIGINT}
      </if>
      <if test="parentIds != null">
          and parent_ids = #{parentIds,jdbcType=VARCHAR}
      </if>
      <if test="available != null">
          and available = #{available,jdbcType=BIT}
      </if>
    </where>
  </delete>
  <update id="move">
        update sys_organization set parent_id=#{target.id},parent_ids=#{target.parentIds} where id=#{source.id};
        update sys_organization set parent_ids=concat(concat(concat(#{target.parentIds},#{target.id}),'/'), substring(parent_ids, length(concat(concat(#{source.parentIds},#{source.id}),'/')))) where parent_ids like concat(concat(concat(#{source.parentIds},#{source.id}),'/'),'%')
    </update>
  <select id="findAllWithExclude" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from sys_organization
    WHERE
    id!=#{id,jdbcType=BIGINT}
    AND parent_ids NOT LIKE concat(concat(concat(#{parentIds,jdbcType=VARCHAR},#{id,jdbcType=BIGINT}),'/'),'%')
  </select>

</mapper>